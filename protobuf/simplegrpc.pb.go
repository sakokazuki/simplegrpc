// Code generated by protoc-gen-go. DO NOT EDIT.
// source: simplegrpc.proto

package simplegrpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EventType struct {
	Type                 string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventType) Reset()         { *m = EventType{} }
func (m *EventType) String() string { return proto.CompactTextString(m) }
func (*EventType) ProtoMessage()    {}
func (*EventType) Descriptor() ([]byte, []int) {
	return fileDescriptor_simplegrpc_afaccd64495b11d9, []int{0}
}
func (m *EventType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventType.Unmarshal(m, b)
}
func (m *EventType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventType.Marshal(b, m, deterministic)
}
func (dst *EventType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventType.Merge(dst, src)
}
func (m *EventType) XXX_Size() int {
	return xxx_messageInfo_EventType.Size(m)
}
func (m *EventType) XXX_DiscardUnknown() {
	xxx_messageInfo_EventType.DiscardUnknown(m)
}

var xxx_messageInfo_EventType proto.InternalMessageInfo

func (m *EventType) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type Success struct {
	IsSuccess            bool     `protobuf:"varint,1,opt,name=isSuccess,proto3" json:"isSuccess,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Success) Reset()         { *m = Success{} }
func (m *Success) String() string { return proto.CompactTextString(m) }
func (*Success) ProtoMessage()    {}
func (*Success) Descriptor() ([]byte, []int) {
	return fileDescriptor_simplegrpc_afaccd64495b11d9, []int{1}
}
func (m *Success) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Success.Unmarshal(m, b)
}
func (m *Success) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Success.Marshal(b, m, deterministic)
}
func (dst *Success) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Success.Merge(dst, src)
}
func (m *Success) XXX_Size() int {
	return xxx_messageInfo_Success.Size(m)
}
func (m *Success) XXX_DiscardUnknown() {
	xxx_messageInfo_Success.DiscardUnknown(m)
}

var xxx_messageInfo_Success proto.InternalMessageInfo

func (m *Success) GetIsSuccess() bool {
	if m != nil {
		return m.IsSuccess
	}
	return false
}

type Json struct {
	Data                 string   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Json) Reset()         { *m = Json{} }
func (m *Json) String() string { return proto.CompactTextString(m) }
func (*Json) ProtoMessage()    {}
func (*Json) Descriptor() ([]byte, []int) {
	return fileDescriptor_simplegrpc_afaccd64495b11d9, []int{2}
}
func (m *Json) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Json.Unmarshal(m, b)
}
func (m *Json) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Json.Marshal(b, m, deterministic)
}
func (dst *Json) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Json.Merge(dst, src)
}
func (m *Json) XXX_Size() int {
	return xxx_messageInfo_Json.Size(m)
}
func (m *Json) XXX_DiscardUnknown() {
	xxx_messageInfo_Json.DiscardUnknown(m)
}

var xxx_messageInfo_Json proto.InternalMessageInfo

func (m *Json) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type Request struct {
	Events               []*EventType `protobuf:"bytes,1,rep,name=Events,proto3" json:"Events,omitempty"`
	ForceClose           bool         `protobuf:"varint,2,opt,name=forceClose,proto3" json:"forceClose,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_simplegrpc_afaccd64495b11d9, []int{3}
}
func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (dst *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(dst, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetEvents() []*EventType {
	if m != nil {
		return m.Events
	}
	return nil
}

func (m *Request) GetForceClose() bool {
	if m != nil {
		return m.ForceClose
	}
	return false
}

type Payload struct {
	EventType            *EventType `protobuf:"bytes,1,opt,name=eventType,proto3" json:"eventType,omitempty"`
	Data                 string     `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Payload) Reset()         { *m = Payload{} }
func (m *Payload) String() string { return proto.CompactTextString(m) }
func (*Payload) ProtoMessage()    {}
func (*Payload) Descriptor() ([]byte, []int) {
	return fileDescriptor_simplegrpc_afaccd64495b11d9, []int{4}
}
func (m *Payload) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Payload.Unmarshal(m, b)
}
func (m *Payload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Payload.Marshal(b, m, deterministic)
}
func (dst *Payload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Payload.Merge(dst, src)
}
func (m *Payload) XXX_Size() int {
	return xxx_messageInfo_Payload.Size(m)
}
func (m *Payload) XXX_DiscardUnknown() {
	xxx_messageInfo_Payload.DiscardUnknown(m)
}

var xxx_messageInfo_Payload proto.InternalMessageInfo

func (m *Payload) GetEventType() *EventType {
	if m != nil {
		return m.EventType
	}
	return nil
}

func (m *Payload) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func init() {
	proto.RegisterType((*EventType)(nil), "simplegrpc.EventType")
	proto.RegisterType((*Success)(nil), "simplegrpc.Success")
	proto.RegisterType((*Json)(nil), "simplegrpc.Json")
	proto.RegisterType((*Request)(nil), "simplegrpc.Request")
	proto.RegisterType((*Payload)(nil), "simplegrpc.Payload")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StreamServiceClient is the client API for StreamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StreamServiceClient interface {
	Events(ctx context.Context, opts ...grpc.CallOption) (StreamService_EventsClient, error)
	Publish(ctx context.Context, in *Json, opts ...grpc.CallOption) (*Success, error)
}

type streamServiceClient struct {
	cc *grpc.ClientConn
}

func NewStreamServiceClient(cc *grpc.ClientConn) StreamServiceClient {
	return &streamServiceClient{cc}
}

func (c *streamServiceClient) Events(ctx context.Context, opts ...grpc.CallOption) (StreamService_EventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StreamService_serviceDesc.Streams[0], "/simplegrpc.StreamService/Events", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamServiceEventsClient{stream}
	return x, nil
}

type StreamService_EventsClient interface {
	Send(*Request) error
	Recv() (*Payload, error)
	grpc.ClientStream
}

type streamServiceEventsClient struct {
	grpc.ClientStream
}

func (x *streamServiceEventsClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamServiceEventsClient) Recv() (*Payload, error) {
	m := new(Payload)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamServiceClient) Publish(ctx context.Context, in *Json, opts ...grpc.CallOption) (*Success, error) {
	out := new(Success)
	err := c.cc.Invoke(ctx, "/simplegrpc.StreamService/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StreamServiceServer is the server API for StreamService service.
type StreamServiceServer interface {
	Events(StreamService_EventsServer) error
	Publish(context.Context, *Json) (*Success, error)
}

func RegisterStreamServiceServer(s *grpc.Server, srv StreamServiceServer) {
	s.RegisterService(&_StreamService_serviceDesc, srv)
}

func _StreamService_Events_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamServiceServer).Events(&streamServiceEventsServer{stream})
}

type StreamService_EventsServer interface {
	Send(*Payload) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type streamServiceEventsServer struct {
	grpc.ServerStream
}

func (x *streamServiceEventsServer) Send(m *Payload) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamServiceEventsServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StreamService_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Json)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServiceServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simplegrpc.StreamService/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServiceServer).Publish(ctx, req.(*Json))
	}
	return interceptor(ctx, in, info, handler)
}

var _StreamService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "simplegrpc.StreamService",
	HandlerType: (*StreamServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _StreamService_Publish_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Events",
			Handler:       _StreamService_Events_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "simplegrpc.proto",
}

func init() { proto.RegisterFile("simplegrpc.proto", fileDescriptor_simplegrpc_afaccd64495b11d9) }

var fileDescriptor_simplegrpc_afaccd64495b11d9 = []byte{
	// 307 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x51, 0x41, 0x4f, 0x32, 0x31,
	0x14, 0x64, 0xf9, 0x08, 0xfb, 0xed, 0x33, 0x06, 0x52, 0x63, 0x42, 0xd0, 0xa8, 0xe9, 0x45, 0x2e,
	0x6e, 0x0c, 0x5c, 0x3c, 0x63, 0x0c, 0x89, 0xa7, 0x4d, 0xd7, 0x83, 0xd7, 0x52, 0x9e, 0xd8, 0xb8,
	0xd0, 0xda, 0x76, 0x89, 0x1c, 0xfc, 0x43, 0xfe, 0x4a, 0xd3, 0x66, 0x97, 0x5d, 0x0e, 0xde, 0xa6,
	0x93, 0x79, 0x33, 0xd3, 0xf7, 0x60, 0x68, 0xe5, 0x46, 0x17, 0xb8, 0x36, 0x5a, 0xa4, 0xda, 0x28,
	0xa7, 0x08, 0x34, 0x0c, 0xbd, 0x86, 0xe4, 0x69, 0x87, 0x5b, 0xf7, 0xb2, 0xd7, 0x48, 0x08, 0xf4,
	0xdc, 0x5e, 0xe3, 0x28, 0xba, 0x89, 0x26, 0x09, 0x0b, 0x98, 0xde, 0x42, 0x9c, 0x97, 0x42, 0xa0,
	0xb5, 0xe4, 0x12, 0x12, 0x69, 0xab, 0x47, 0xd0, 0xfc, 0x67, 0x0d, 0x41, 0xc7, 0xd0, 0x7b, 0xb6,
	0x6a, 0xeb, 0x4d, 0x56, 0xdc, 0xf1, 0xda, 0xc4, 0x63, 0xfa, 0x0a, 0x31, 0xc3, 0xcf, 0x12, 0xad,
	0x23, 0x77, 0xd0, 0x0f, 0x81, 0xde, 0xe1, 0xdf, 0xe4, 0x64, 0x7a, 0x9e, 0xb6, 0xfa, 0x1d, 0xaa,
	0xb0, 0x4a, 0x44, 0xae, 0x00, 0xde, 0x94, 0x11, 0xf8, 0x58, 0x28, 0x8b, 0xa3, 0x6e, 0x08, 0x6d,
	0x31, 0x94, 0x41, 0x9c, 0xf1, 0x7d, 0xa1, 0xf8, 0x8a, 0xcc, 0x20, 0xc1, 0x7a, 0x3e, 0xa4, 0xff,
	0x69, 0xde, 0xe8, 0x0e, 0x6d, 0xbb, 0x4d, 0xdb, 0xe9, 0x37, 0x9c, 0xe6, 0xce, 0x20, 0xdf, 0xe4,
	0x68, 0x76, 0x52, 0x20, 0x79, 0xa8, 0x3b, 0x93, 0xb3, 0xb6, 0x61, 0xf5, 0xa5, 0xf1, 0x11, 0x59,
	0xb5, 0xa1, 0x9d, 0x49, 0x74, 0x1f, 0x91, 0x29, 0xc4, 0x59, 0xb9, 0x2c, 0xa4, 0x7d, 0x27, 0xc3,
	0xb6, 0xca, 0x6f, 0xea, 0x78, 0xae, 0x5e, 0x63, 0x67, 0x3e, 0x87, 0x0b, 0xa9, 0xd2, 0x40, 0xe2,
	0x17, 0xf7, 0x02, 0x9b, 0x1a, 0x55, 0x3a, 0x5c, 0x97, 0x72, 0x85, 0xf3, 0x01, 0xf3, 0x78, 0xe1,
	0x71, 0xe6, 0xcf, 0x99, 0x45, 0x3f, 0xdd, 0x41, 0xce, 0x3f, 0x54, 0x9a, 0x07, 0xb7, 0x85, 0xd1,
	0x62, 0xd9, 0x0f, 0x97, 0x9e, 0xfd, 0x06, 0x00, 0x00, 0xff, 0xff, 0x5e, 0xf9, 0xd1, 0x54, 0xfd,
	0x01, 0x00, 0x00,
}
